{"version":3,"sources":["components/Bearish.js","components/Highest.js","components/Timetravel.js","App.js","index.js"],"names":["Bearish","data","m","n","result","compare","length","first","prices","i","Highest","result1","k","t","total","total_volumes","s","Date","toLocaleDateString","push","biggest","indexOf","Math","max","g","Timetravel","resultt","gap","gap2","ostoHinta","myyntiHinta","o","u","App","useState","date1","setDate1","date2","setDate2","setData","setN","setM","id","onSubmit","event","preventDefault","a","getTime","b","current","alert","console","log","url","axios","get","then","response","type","value","onChange","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32cec670.chunk.js","sourcesContent":["const Bearish = ({ data, m, n }) => {\r\n\r\n\r\n    let result = 0\r\n    let compare = 0\r\n\r\n    //Jos tietoja ei ole syötetty lomakkeeseen, palautetaan 0.\r\n\r\n    if (data.length === 0) {\r\n\r\n        return (\r\n            <p>{data.length}</p>\r\n\r\n        )\r\n    }\r\n\r\n    // Mikäli syötettyjen päivämäärien välillä on yli 90 päivää tai jos ensimmäinen päivämäärä on ennen 24.5.2018 palauttaa CoinGecko päiväkohtaisen datan  \r\n    //Tässä lasketaan kuinka monta päivää bitcoinin arvo on mennyt alaspäin.\r\n\r\n    if (m - n > 7776000 || n < 1527109200) {\r\n\r\n        let first = data.prices[0][1]\r\n\r\n        for (let i = 1; i < data.prices.length; i++) {\r\n\r\n            if (data.prices[i][1] < first) {\r\n                first = data.prices[i][1]\r\n                compare++\r\n            }\r\n            else {\r\n                first = data.prices[i][1]\r\n                if (compare > result) {\r\n                    result = compare \r\n                    compare = 0\r\n                }\r\n                else { compare = 0 }\r\n            }\r\n            if (compare > result) {\r\n                result = compare \r\n            }\r\n\r\n        }\r\n\r\n        if (result > 0 ){\r\n            result = result + 1\r\n        }\r\n\r\n        return (\r\n\r\n            <p> {result}</p>\r\n\r\n        )\r\n\r\n    }\r\n\r\n    // Muuten tiedot tulevat jokaiselta tunnilta, jolloin tiedot verrataan päivän ensimmäisen tunnin tietojen perusteella.\r\n    //Koska tietoja tulee jokaiselta tunnilta, niin hypätään aina 24 tuntia eteenpäin, jotta saadaan seuraavan päivän arvo.\r\n\r\n    else {\r\n\r\n        let first = data.prices[0][1]\r\n\r\n        for (let i = 24; i < data.prices.length; i = i + 24) {\r\n            if (data.prices[i][1] < first) {\r\n                first = data.prices[i][1]\r\n                compare++\r\n            }\r\n            else {\r\n                first = data.prices[i][1]\r\n                if (compare > result) {\r\n                    result = compare\r\n                    compare = 0\r\n                }\r\n                else { compare = 0 }\r\n            }\r\n            if (compare > result) {\r\n                result = compare\r\n            }\r\n\r\n        }\r\n\r\n        if (result > 0 ){\r\n            result = result + 1\r\n        }\r\n        return (\r\n\r\n            <p> {result}</p>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Bearish\r\n\r\n","const Highest = ({ data, n, m }) => {\r\n\r\n    let result1 = 0\r\n    let result = 0\r\n    let k = 0\r\n    const t = []\r\n    let total = 0\r\n\r\n    //Jos tietoja ei ole syötetty lomakkeeseen, palautetaan 0.\r\n\r\n    if (data.length === 0) {\r\n\r\n        return (\r\n            <p>{data.length}</p>\r\n\r\n        )\r\n    }\r\n\r\n    // Mikäli syötettyjen päivämäärien välillä on yli 90 päivää, tai jos ensimmäinen päivämäärä on ennen 24.5.2018, CoinGecko palauttaa päiväkohtaisen datan.\r\n    //Etsitään suurin arvo.   \r\n\r\n    if (m - n > 7776000 || n < 1527109200) {\r\n        result1 = data.total_volumes[0][1]\r\n\r\n        for (let i = 1; i < data.total_volumes.length; i++) {\r\n\r\n            if (result1 < data.total_volumes[i][1]) {\r\n                result1 = data.total_volumes[i][1]\r\n                k = i\r\n            }\r\n        }\r\n        result = data.total_volumes[k][0]\r\n        var s = new Date(result).toLocaleDateString(\"fi-FI\")\r\n\r\n\r\n        return (\r\n\r\n            <p>Highest trading volume was on {s} and it was {data.total_volumes[k][1]} €</p>\r\n        )\r\n    }\r\n\r\n    // Muussa tapauksessa tieto tulee jokaiselta tunnilta, jolloin lasketaan yhteen kaikki tunnit kyseiseltä päivältä.\r\n    //Jonka jälkeen etsitään yhteenlasketuista summista suurin.\r\n\r\n    else {\r\n        for (let i = 0; i < data.total_volumes.length; i = i + 24) {\r\n            for (let k = 0; k < 24; k++) {\r\n                total = total + data.total_volumes[k][1]\r\n            }\r\n            t.push(total)\r\n        }\r\n\r\n        let biggest = t.indexOf(Math.max(...t))\r\n        biggest = biggest * 24\r\n\r\n        result = data.total_volumes[biggest][0]\r\n        let g = new Date(result).toLocaleDateString(\"fi-FI\")\r\n\r\n\r\n        return (\r\n\r\n            <p> Highest trading volume was on {g} and it was {Math.max(...t)} €</p>\r\n        )\r\n\r\n\r\n    }\r\n}\r\nexport default Highest","const Timetravel = ({ data }) => {\r\n\r\n    let result1 = 0\r\n    let result = 0\r\n    let resultt = 0\r\n    let gap = 0\r\n    let gap2 = 0\r\n    let ostoHinta = 0\r\n    let myyntiHinta = 0\r\n\r\n    //Jos tietoja ei ole syötetty lomakkeeseen, palautetaan 0.\r\n\r\n    if (data.length === 0) {\r\n\r\n        return (\r\n            <p>{data.length}</p>\r\n\r\n        )\r\n    }\r\n\r\n    //Etsitään päivämäärien sisältä minkä kahden luvun välillä on suurin erotus ilman, että ajassa voi matkusta uudelleen taaksepäin.\r\n    //Roope Ankka ei ikinä laittaisi rahojaan bitcoiniin, koska tykkää rahan kilinästä ja siinä uimisesta, mistä syystä hän ei niitä laita pankkiinkaan.\r\n\r\n\r\n    else {\r\n\r\n        for (let o = 0; o < data.prices.length; o++) {\r\n\r\n            result1 = data.prices[o][1]\r\n\r\n            for (let i = o; i < data.prices.length; i++) {\r\n                if (data.prices[i][1] > result1) {\r\n                    gap = data.prices[i][1] - result1\r\n                    if (gap > gap2) {\r\n                        gap2 = gap\r\n\r\n                        resultt = data.prices[o][0]\r\n                        result = data.prices[i][0]\r\n\r\n                        ostoHinta = data.prices[o][1]\r\n                        myyntiHinta = data.prices[i][1]\r\n\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let u = new Date(resultt).toLocaleDateString(\"fi-FI\")\r\n        let s = new Date(result).toLocaleDateString(\"fi-FI\")\r\n\r\n        if (ostoHinta < myyntiHinta) {\r\n\r\n            return (\r\n\r\n                <p> Scrooge should travel to {u} and sell all the bitcoin on {s}  to maximize the profits. </p>\r\n\r\n            )\r\n        }\r\n        else {\r\n\r\n            return (\r\n                <p>Scrooge shouldn't buy and sell, bad timing. </p>\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\nexport default Timetravel","import axios from 'axios'\nimport React, { useState } from 'react'\nimport Bearish from './components/Bearish'\nimport Highest from './components/Highest'\nimport Timetravel from './components/Timetravel'\nimport './App.css'\n\nfunction App() {\n\n  const [date1, setDate1] = useState('')\n  const [date2, setDate2] = useState('')\n  const [data, setData] = useState([])\n  const [n, setN] = useState('')\n  const [m, setM] = useState('')\n\n\n  const handleDate1Change = (event) => {\n    setDate1(event.target.value)\n  }\n\n  const handleDate2Change = (event) => {\n    setDate2(event.target.value)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n\n    let a = new Date(date1).getTime() / 1000 - 7200 \n    let b = new Date(date2).getTime() / 1000 + 7200\n    setN(a)\n    setM(b)\n    \n    const current = new Date().getTime()/1000\n\n    //Tarkistaan ettei haku ylitä nykyistä päivämäärää tai ettei aloituspäivä ole myöhäisempi kuin lopetuspäivä\n\n    if(a > b || b > current || a > current){\n      alert(\"Check the dates\")\n      console.log(current)\n    }\nelse {\n    // Haetaan tiedot päivämäärien perusteella\n\n    const url = 'https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=eur&from=' + a + '&to=' + b\n\n    axios\n      .get(url)\n      .then(response => {\n        setData(response.data)\n      })\n\n  }\n}\n  return (\n    <div>\n      <div id=\"search\">\n        <h3>Dates</h3>\n\n        <form onSubmit={handleSubmit}>\n          From\n          <input id=\"date\" type=\"date\"\n            value={date1}\n            onChange={handleDate1Change}\n          />\n\n          To\n          <input id=\"date1\" type=\"date\"\n            value={date2}\n            onChange={handleDate2Change}\n          />\n\n          <button type=\"submit\">Search</button>\n        </form>\n      </div>\n      <div id=\"results\">\n        <h3>How many days is the longest bearish (downward) trend within a given date range?</h3>\n\n        <Bearish data={data} m={m} n={n} />\n\n        <h3>Which date within a given date range had the highest trading volume?</h3>\n\n        <Highest data={data} m={m} n={n} />\n\n        <h3>Time travel</h3>\n\n        <Timetravel data={data} />\n      </div>\n\n\n      <div>\n  \n      <p>Example: In bitcoin’s historical data from CoinGecko, the price decreased 3 days in a row for the\n      inputs from 2020-01-19 and to 2020-01-21, and the price decreased for 5 days in a row for the\n      inputs from 2020-03-01 and to 2021-08-01.</p>\n\n      <p>Yläpuolella olevan tehtävänannon mukaan bitcoinin arvo laski aikavälillä 1.3.2020 - 1.8.2021 5 päivää, mutta CoinGeckon tietojen mukaan se laski 9 päivää.</p>\n\n      </div>\n    </div>\n   \n  )\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}