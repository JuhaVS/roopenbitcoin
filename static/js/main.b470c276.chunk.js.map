{"version":3,"sources":["components/Bearish.js","components/Highest.js","components/Timetravel.js","App.js","index.js"],"names":["Bearish","data","m","n","result","compare","length","first","prices","i","Highest","result1","k","t","total","total_volumes","s","Date","toLocaleDateString","push","biggest","indexOf","Math","max","g","Timetravel","resultt","gap","gap2","ostoHinta","myyntiHinta","o","u","App","useState","date1","setDate1","date2","setDate2","setData","setN","setM","id","onSubmit","event","preventDefault","a","getTime","b","url","axios","get","then","response","type","class","value","onChange","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b470c276.chunk.js","sourcesContent":["const Bearish= ({data, m, n}) => {\r\n\r\n\r\n    let result = 0\r\n    let compare = 0\r\n\r\n    //Mikäli ei tietoja palautetaan 0\r\n\r\n    if(data.length === 0){\r\n\r\n        return(\r\n            <p>{data.length}</p>\r\n            \r\n        )\r\n    }\r\n\r\n    // Mikäli noudettujen päivämäärien välillä on yli 90 päivää tai jos ensimmäinen päivämäärä on ennen 24.5.2018 palautuu jokaiselta päivältä 1 tieto joka tarkastetaan\r\n    //Lasketaan tieto monenako päivänä arvo on mennyt alaspäin\r\n\r\n    if (m - n > 7776000 || n < 1527109200) {  \r\n\r\n    let first = data.prices[0][1]\r\n\r\n    for(let i = 1; i<data.prices.length;i++){\r\n\r\n       if (data.prices[i][1] < first){\r\n           first=data.prices[i][1]\r\n            compare++\r\n            } \r\n       else {\r\n            first = data.prices[i][1]\r\n            if(compare > result){\r\n            result = compare\r\n            compare = 0}\r\n            else{compare = 0}\r\n       }\r\n       if(compare > result){\r\n        result = compare}\r\n\r\n    }\r\n    return(\r\n        \r\n        <p> {result}</p>\r\n\r\n    )\r\n\r\n}\r\n\r\n// Muutoin tieto tulee joka tunnilta jolloin verrataan päivän ensimmäisen tunnin tietoja. \r\n//Koska tietoa tulee joka tunnilta hypätään aina 24 tuntia eteenpäin, että saadaan seuraavan päivän arvo\r\n\r\n        else { \r\n\r\n             let first = data.prices[0][1]\r\n\r\n            for(let i = 24; i<data.prices.length;i=i+24){\r\n             if (data.prices[i][1] < first){\r\n                first=data.prices[i][1]\r\n                compare++\r\n            } \r\n           else {\r\n                first = data.prices[i][1]\r\n                if(compare > result){\r\n                result = compare\r\n                compare = 0}\r\n                else{compare = 0}\r\n                }\r\n            }\r\n    return(\r\n        \r\n          <p> {result}</p>\r\n\r\n      )\r\n    \r\n    }  \r\n}\r\n\r\nexport default Bearish\r\n\r\n","const Highest= ({data, n ,m}) => {\r\n\r\n    let result1 = 0\r\n    let result = 0\r\n    let k = 0\r\n    const t = []\r\n    let total = 0\r\n\r\n    //Mikäli ei tietoja palautetaan 0\r\n\r\n    if(data.length === 0){\r\n\r\n        return(\r\n            <p>{data.length}</p>\r\n            \r\n        )\r\n    }\r\n\r\n    // Mikäli noudettujen päivämäärien välillä on yli 90 päivää tai jos ensimmäinen päivämäärä on ennen 24.5.2018 palautuu jokaiselta päivältä 1 tieto joka tarkastetaan\r\n    //Etsitään suurin arvo   \r\n\r\n    if (m - n > 7776000 || n < 1527109200) {  \r\n        result1 = data.total_volumes[0][1]\r\n\r\n    for(let i = 1; i<data.total_volumes.length;i++){\r\n\r\n       if (result1 < data.total_volumes[i][1]){\r\n           result1=data.total_volumes[i][1]\r\n           k=i\r\n            }\r\n       }\r\n       result = data.total_volumes[k][0]          \r\n        var s = new Date(result).toLocaleDateString(\"fi-FI\")\r\n\r\n\r\n         return(\r\n        \r\n        <p>Highest trading volume was on {s} and it was {data.total_volumes[k][1]} €</p>\r\n      )    \r\n    }\r\n  \r\n    // Muutoin tieto tulee joka tunnilta jolloin lasketaan yhteen kaikki tunnit kyseiseltä päivältä\r\n    //Jonka jälkeen etsitään yhteenlasketuista summista suurin\r\n\r\n    else{\r\n        for(let i = 0; i<data.total_volumes.length;i=i+24){\r\n            for(let k = 0; k<24; k++){\r\n                total = total + data.total_volumes[k][1]\r\n        }\r\n            t.push(total)\r\n }\r\n \r\n            let biggest = t.indexOf(Math.max(...t))\r\n            biggest = biggest*24\r\n \r\n              result = data.total_volumes[biggest][0]          \r\n              let g = new Date(result).toLocaleDateString(\"fi-FI\")\r\n\r\n         \r\n              return(\r\n             \r\n             <p> Highest trading volume was on {g} and it was {Math.max(...t)} €</p>\r\n           ) \r\n\r\n\r\n    }\r\n}\r\nexport default Highest","const Timetravel= ({data}) => {\r\n\r\n    let result1 = 0\r\n    let result = 0\r\n    let resultt =0\r\n    let gap = 0\r\n    let gap2 = 0\r\n    let ostoHinta = 0\r\n    let myyntiHinta = 0\r\n\r\n    //Mikäli ei tietoja palautetaan 0\r\n\r\n    if(data.length === 0){\r\n\r\n        return(\r\n            <p>{data.length}</p>\r\n            \r\n        )\r\n    }\r\n\r\n    //Etsitään päivämäärien sisältä minkä kahden luvun välillä on suurin erotus ilman että ajassa voi matkusta uudelleen takaisinpäin\r\n    //Vaikkakin Roope Ankka ei ikinä laittaisi rahojaan bitcoiniin, koska tykkää rahan kilinästä ja siellä uimisesta, mistä syystä hän ei niitä laita pankkiinkaan.\r\n\r\n\r\n    else{\r\n\r\n    for (let o = 0;o < data.prices.length;o++){    \r\n\r\n        result1 = data.prices[o][1]\r\n\r\n        for(let i = o;i<data.prices.length;i++){\r\n            if(data.prices[i][1] > result1){\r\n                 gap = data.prices[i][1] - result1\r\n                    if(gap > gap2){\r\n                        gap2 =gap     \r\n\r\n                        resultt = data.prices[o][0]\r\n                        result = data.prices[i][0] \r\n\r\n                        ostoHinta  = data.prices[o][1]\r\n                        myyntiHinta = data.prices[i][1]\r\n                        \r\n\r\n                }\r\n            }\r\n        }\r\n        }\r\n        \r\nlet u = new Date(resultt).toLocaleDateString(\"fi-FI\")\r\nlet s = new Date(result).toLocaleDateString(\"fi-FI\")\r\n\r\nif(ostoHinta < myyntiHinta){\r\n\r\n    return(\r\n        \r\n        <p> Scrooge should travel to {u} and sell all the bitcoin on {s}  to maximize the profits. </p>\r\n\r\n      )\r\n}\r\nelse{\r\n    \r\n    return(\r\n        <p>Scrooge shouldn't buy and sell, bad timing. </p>\r\n    )\r\n\r\n}\r\n\r\n    }\r\n \r\n}\r\nexport default Timetravel","import axios from 'axios'\nimport React, { useState } from 'react'\nimport Bearish from './components/Bearish'\nimport Highest from './components/Highest'\nimport Timetravel from './components/Timetravel'\nimport './App.css'\n\nfunction App() {\n\n  const [date1, setDate1] = useState('') \n  const [date2, setDate2] = useState('') \n  const [data, setData] = useState([])\n  const [n, setN] = useState('') \n  const [m, setM] = useState('') \n\n\n  const handleDate1Change = (event) => {\n    setDate1(event.target.value)\n  }\n\n  const handleDate2Change = (event) => {\n    setDate2(event.target.value)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n\n    let a = new Date(date1).getTime() / 1000 \n    let b = new Date(date2).getTime() / 1000 + 7200\n    setN(a)\n    setM(b)\n\n    // Haetaan tiedot päivämäärien perusteella\n\n    const url= 'https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=eur&from=' + a + '&to=' + b \n\n    axios\n    .get(url)\n    .then(response => {\n      setData(response.data)\n    })\n\n } \n\n  return (\n    <div>\n    <div id=\"search\">\n    <h3>Dates</h3>\n\n      <form onSubmit={handleSubmit}>\n        From\n        <input type=\"date\" class=\"dates\" \n          value={date1}\n          onChange={handleDate1Change}\n        />\n         \n         To\n        <input type=\"date\" class=\"dates\" \n          value={date2}\n          onChange={handleDate2Change}\n        />\n        \n        <button type=\"submit\">Search</button>\n      </form> \n      </div>\n      <div id=\"results\"> \n      <h3>How many days is the longest bearish (downward) trend within a given date range?</h3>\n\n      <Bearish data = {data} m = {m} n = {n}/>\n\n      <h3>Which date within a given date range had the highest trading volume?</h3>\n\n      <Highest data = {data} m = {m} n = {n}/>\n\n      <h3>Time travel</h3>\n\n      <Timetravel data = {data}/>\n    </div>\n    </div>\n  )\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}